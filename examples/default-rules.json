[
  {
    "name": "privileged-container",
    "category": "Container Security",
    "severity": "HIGH",
    "description": "Container is running in privileged mode",
    "remediation": "Remove privileged: true from container security context. Privileged containers have access to all host devices and bypass security mechanisms.",
    "rule_type": "pod",
    "query": "$.containers[*].securityContext.privileged",
    "condition": "== true",
    "enabled": true,
    "tags": "cis,nist,privileged,container"
  },
  {
    "name": "root-user-container",
    "category": "Container Security",
    "severity": "MEDIUM", 
    "description": "Container may be running as root user",
    "remediation": "Set runAsNonRoot: true and runAsUser to non-zero value. Running as root increases attack surface.",
    "rule_type": "pod",
    "query": "$.containers[*].securityContext.runAsUser",
    "condition": "== 0 OR null",
    "enabled": true,
    "tags": "cis,root,user,container"
  },
  {
    "name": "no-resource-limits",
    "category": "Resource Management",
    "severity": "MEDIUM",
    "description": "Container has no resource limits defined",
    "remediation": "Set CPU and memory limits to prevent resource exhaustion and potential DoS attacks.",
    "rule_type": "pod", 
    "query": "$.containers[*].resources.limits",
    "condition": "null OR empty",
    "enabled": true,
    "tags": "resources,limits,dos"
  },
  {
    "name": "latest-image-tag",
    "category": "Image Security",
    "severity": "LOW",
    "description": "Container uses 'latest' tag or no tag specified",
    "remediation": "Use specific image tags for reproducible deployments and to avoid pulling unintended updates.",
    "rule_type": "pod",
    "query": "$.containers[*].image", 
    "condition": "endsWith ':latest' OR NOT contains ':'",
    "enabled": true,
    "tags": "image,tags,reproducibility"
  },
  {
    "name": "host-network-usage",
    "category": "Host Security",
    "severity": "HIGH",
    "description": "Pod uses host network namespace",
    "remediation": "Avoid hostNetwork unless absolutely necessary. This bypasses network isolation.",
    "rule_type": "pod",
    "query": "$.hostNetwork",
    "condition": "== true",
    "enabled": true,
    "tags": "host,network,isolation"
  },
  {
    "name": "host-pid-usage",
    "category": "Host Security", 
    "severity": "HIGH",
    "description": "Pod uses host PID namespace",
    "remediation": "Avoid hostPID unless absolutely necessary. This allows visibility into host processes.",
    "rule_type": "pod",
    "query": "$.hostPID",
    "condition": "== true", 
    "enabled": true,
    "tags": "host,pid,isolation"
  },
  {
    "name": "host-ipc-usage",
    "category": "Host Security",
    "severity": "MEDIUM",
    "description": "Pod uses host IPC namespace", 
    "remediation": "Avoid hostIPC unless absolutely necessary. This shares host IPC resources.",
    "rule_type": "pod",
    "query": "$.hostIPC",
    "condition": "== true",
    "enabled": true,
    "tags": "host,ipc,isolation"
  },
  {
    "name": "nodeport-service",
    "category": "Network Security",
    "severity": "MEDIUM",
    "description": "Service uses NodePort type which exposes ports on all nodes",
    "remediation": "Consider using ClusterIP or LoadBalancer instead of NodePort to reduce attack surface.",
    "rule_type": "service",
    "query": "$.type", 
    "condition": "== 'NodePort'",
    "enabled": true,
    "tags": "network,exposure,nodeport"
  },
  {
    "name": "loadbalancer-external-access",
    "category": "Network Security",
    "severity": "LOW",
    "description": "LoadBalancer service detected - ensure proper network security controls",
    "remediation": "Configure appropriate load balancer security groups and ingress rules to restrict access.",
    "rule_type": "service",
    "query": "$.type",
    "condition": "== 'LoadBalancer'",
    "enabled": true,
    "tags": "network,loadbalancer,exposure"
  },
  {
    "name": "wildcard-rbac-permissions",
    "category": "RBAC",
    "severity": "HIGH", 
    "description": "Role has wildcard permissions (*/*)",
    "remediation": "Use least-privilege principle and specify exact resources and verbs instead of wildcards.",
    "rule_type": "rbac",
    "query": "$.rules[*].resources[*]",
    "condition": "== '*'",
    "enabled": true,
    "tags": "rbac,wildcard,permissions"
  },
  {
    "name": "wildcard-rbac-verbs",
    "category": "RBAC",
    "severity": "HIGH",
    "description": "Role has wildcard verb permissions (*)",
    "remediation": "Specify exact verbs needed instead of using wildcard (*) permissions.",
    "rule_type": "rbac", 
    "query": "$.rules[*].verbs[*]",
    "condition": "== '*'",
    "enabled": true,
    "tags": "rbac,wildcard,verbs"
  },
  {
    "name": "default-service-account",
    "category": "RBAC",
    "severity": "LOW",
    "description": "Pod uses default service account", 
    "remediation": "Create and use dedicated service accounts for applications with minimal required permissions.",
    "rule_type": "pod",
    "query": "$.serviceAccount",
    "condition": "== 'default' OR == '' OR null",
    "enabled": true,
    "tags": "rbac,service-account,default"
  },
  {
    "name": "no-network-policies",
    "category": "Network Security",
    "severity": "MEDIUM",
    "description": "Namespace has no network policies - all traffic allowed by default",
    "remediation": "Implement network policies to restrict pod-to-pod communication and enforce network segmentation.",
    "rule_type": "namespace",
    "query": "$.networkPolicies",
    "condition": "count == 0",
    "enabled": true,
    "tags": "network,policies,segmentation"
  },
  {
    "name": "allow-privilege-escalation",
    "category": "Container Security",
    "severity": "MEDIUM",
    "description": "Container allows privilege escalation",
    "remediation": "Set allowPrivilegeEscalation: false to prevent containers from gaining more privileges than their parent process.",
    "rule_type": "pod",
    "query": "$.containers[*].securityContext.allowPrivilegeEscalation",
    "condition": "== true OR null",
    "enabled": true,
    "tags": "container,privilege,escalation"
  },
  {
    "name": "read-only-root-filesystem",
    "category": "Container Security", 
    "severity": "LOW",
    "description": "Container does not use read-only root filesystem",
    "remediation": "Set readOnlyRootFilesystem: true to prevent runtime modification of the container filesystem.",
    "rule_type": "pod",
    "query": "$.containers[*].securityContext.readOnlyRootFilesystem",
    "condition": "== false OR null",
    "enabled": true,
    "tags": "container,filesystem,immutable"
  },
  {
    "name": "dangerous-capabilities",
    "category": "Container Security",
    "severity": "HIGH",
    "description": "Container adds dangerous capabilities",
    "remediation": "Review and remove dangerous capabilities. Drop all capabilities and only add what's absolutely necessary.",
    "rule_type": "pod", 
    "query": "$.containers[*].securityContext.capabilities.add[*]",
    "condition": "== 'SYS_ADMIN' OR == 'NET_ADMIN' OR == 'SYS_TIME'",
    "enabled": true,
    "tags": "container,capabilities,dangerous"
  }
]
